- name: Check if Kibana service exists
  win_shell: Get-Service kibana* | Select-Object -ExpandProperty Name
  register: service_status
  ignore_errors: yes

- block:
    
  - name: Stop Kibana service
    win_service:
      name: "{{ service_status.stdout_lines[0] }}"
      state: stopped

  - name: Remove Kibana service
    win_shell: sc.exe delete "{{ service_status.stdout_lines[0] }}"
    ignore_errors: yes

  when: service_status.stdout_lines != []

- name: Create Kibana directory
  win_file:
    path: C:\ELK\kibana
    state: directory

- name: Check folder permissions for Kibana
  win_acl:
    path: C:\ELK\kibana
    user: '{{ ansible_user }}'
    rights: ReadAndExecute
    type: allow

- name: Download Kibana
  win_get_url:
    url: https://artifacts.elastic.co/downloads/kibana/kibana-8.14.1-windows-x86_64.zip
    dest: C:\ELK\kibana\kibana-8.14.1.zip

- name: Unzip Kibana
  win_unzip:
    src: C:\ELK\kibana\kibana-8.14.1.zip
    dest: C:\ELK\kibana
    creates: C:\ELK\kibana\kibana-8.14.1

- name: check kibana enrollment token
  win_shell: |
    cmd /c C:\ELK\elasticsearch\elasticsearch-8.14.1\bin\elasticsearch-service-tokens list
  register: kibana_tokens

- block:

  - name: create kibana enrollment token
    win_shell: |
      cmd /c C:\ELK\elasticsearch\elasticsearch-8.14.1\bin\elasticsearch-service-tokens create elastic/kibana my_token2
    register: service_token
  
  - name: Extract the service token from the output
    set_fact:
      extracted_token: "{{ service_token.stdout | regex_search('=\\s*(.*)', '\\1') | first | trim }}"
  
  - name: save output of service_token
    lineinfile:
      path: group_vars/all.yml
      regexp: '^service_token_extracted:'
      line: "service_token_extracted: '{{ extracted_token }}'"
      backrefs: yes
    delegate_to: localhost
  
  - name: Reload variables from group_vars/all.yml
    include_vars:
      file: group_vars/all.yml
    delegate_to: localhost

  when: "'elastic/kibana/my_token2' not in kibana_tokens.stdout_lines"

- name: Configure Kibana
  win_template:
    src: kibana.yml.j2
    dest: C:\ELK\kibana\kibana-8.14.1\config\kibana.yml

- name: Create Kibana service using NSSM
  win_shell: |
    C:\Temp\nssm\nssm-2.24\win64\nssm.exe install Kibana "C:\ELK\kibana\kibana-8.14.1\bin\kibana.bat"

- name: Start the Kibana service
  win_service:
    name: Kibana
    start_mode: auto
    state: started

- name: pause to allow service to start
  pause:
    seconds: 600

- name: Wait for Kibana to start
  win_uri:
    url: "{{ kibana_url }}"
    method: GET
    status_code: 200
    url_username: "{{ elastic_user }}"
    url_password: "{{ elastic_pwd }}"
  retries: 2
  delay: 10

